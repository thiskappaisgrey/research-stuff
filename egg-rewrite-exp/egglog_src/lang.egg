;; The minimal syntax of the output of the lakeroad language
(sort IVec (Vec i64))

;; Support Vectors of expressions
;; vectors can potentailly support "unions" and 
(sort Expr)
(sort ExprVec (Vec Expr))
(datatype Op
  (And)
  (Or)
  (Xor)
  (Shr)
  ; Returns a bitvector of width 1.
  (Eq)
  ; Bitwise not.
  (Not)
  (LogicNot)
  ; (Mux select-expr expr expr)
  (Mux)
  
  ; (Op1 (Extract high low) expr)
  ; Extraction from a bitvector.
  (Extract i64 i64 :cost 1)

  ; (Op2 (Concat) top-expr bottom-expr)
  ; Concatenation of two bitvectors.
  (Concat)
  
  ; (Op2 (Reg init-value) clock-expr data-expr)
  (Reg i64)

  ; (Op0 (BV value bitwidth))
  (BV i64 i64)

  ; (Op1 (ZeroExtend bitwidth) expr)
  (ZeroExtend i64)
  )
  (function Var (String i64) Expr :cost 5)
  (function Op0 (Op) Expr :cost 5)
  (function Op1 (Op Expr) Expr :cost 3)
  (function Op2 (Op Expr Expr) Expr :cost 5)
  (function Op3 (Op Expr Expr Expr) Expr :cost 5)
  (function Project (i64 Expr) Expr :cost 0)
  (function Wire (String i64) Expr :cost 5)
  ;; (function apply (Module ExprVec) Expr)
